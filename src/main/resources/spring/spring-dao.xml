<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- 配置数据库连接相关参数-->
    <context:property-placeholder location="classpath:config/*.properties" system-properties-mode="FALLBACK"
                                  ignore-unresolvable="true"/>


    <!-- 实体管理器 -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="org.movie.entity"/>
        <property name="persistenceProviderClass" value="org.datanucleus.api.jpa.PersistenceProviderImpl"/>

        <property name="jpaProperties">
            <props>
                <prop key="datanucleus.rdbms.datastoreAdapterClassName">
                    org.datanucleus.store.rdbms.adapter.MySQLAdapter
                </prop>
                <prop key="datanucleus.schema.autoCreateAll">true</prop>
                <prop key="datanucleus.schema.validateTables">false</prop>
                <prop key="datanucleus.schema.validateConstraints">false</prop>
                <!--<prop key="datanucleus.autoCreateColumns">false</prop>-->
                <!--<prop key="datanucleus.autoCreateConstraints">false</prop>-->
                <!--<prop key="datanucleus.autoCreateSchema">true</prop>-->
                <!--<prop key="datanucleus.autoCreateTables">true</prop>-->
                <!--<prop key="datanucleus.rdbms.omitDatabaseMetaDataGetColumns">true</prop>-->
                <!--<prop key="datanucleus.jpa.addClassTransformer">false</prop>-->
                <!--<prop key="datanucleus.storeManagerType">rdbms</prop>-->
                <!--<prop key="datanucleus.validateConstraints">false</prop>-->
                <!--<prop key="datanucleus.validateTables">false</prop>-->
                <!--<prop key="datanucleus.validation.mode">none</prop>-->
            </props>
        </property>
    </bean>

    <!-- 数据源 -->
    <bean id="dataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 池启动时创建的连接数量 -->
        <property name="initialSize" value="5"/>
        <!-- 同一时间可以从池分配的最多连接数量。设置为0时表示无限制。 -->
        <property name="maxActive" value="30"/>
        <!-- 池里不会被释放的最多空闲连接数量。设置为0时表示无限制。 -->
        <property name="maxIdle" value="20"/>
        <!-- 在不新建连接的条件下，池中保持空闲的最少连接数。 -->
        <property name="minIdle" value="3"/>
        <!-- 设置自动回收超时连接 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 自动回收超时时间(以秒数为单位) -->
        <property name="removeAbandonedTimeout" value="200"/>
        <!-- 设置在自动回收超时连接的时候打印连接的超时错误  -->
        <property name="logAbandoned" value="true"/>
        <!-- 等待超时以毫秒为单位，在抛出异常之前，池等待连接被回收的最长时间（当没有可用连接时）。设置为-1表示无限等待。  -->
        <property name="maxWait" value="100"/>
    </bean>

    <!-- Jedis 连接池配置-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.max_idle}"/>
        <property name="maxTotal" value="${redis.max_total}"/>
        <property name="minIdle" value="${redis.min_idle}"/>
        <property name="testOnBorrow" value="${redis.test_on_borrow}"/>
        <property name="testOnReturn" value="${redis.test_on_return}"/>
    </bean>

    <!-- 配置扫描Dao接口包，动态实现Dao接口，注入到Spring容器中 -->
    <jpa:repositories base-package="org.movie.dao" entity-manager-factory-ref="entityManagerFactory"/>

    <!-- Jedis ConnectionFactory 数据库连接配置，注意id名称必须为redisConnectionFactory-->
    <bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <!--<property name="password" value="${redis.password}" />-->
        <property name="poolConfig" ref="jedisPoolConfig"/>
    </bean>

    <!--创建redis模板-->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="redisConnectionFactory"/>
    </bean>

    <!--创建redisDao模板-->
    <bean id="redisDaoTemplate" class="org.springframework.data.redis.core.RedisTemplate" scope="prototype">
        <property name="connectionFactory" ref="redisConnectionFactory"/>
        <property name="keySerializer" ref="stringRedisSerializer"/>
        <property name="hashKeySerializer" ref="stringRedisSerializer"/>
        <property name="valueSerializer" ref="stringRedisSerializer"/>
        <property name="hashValueSerializer" ref="stringRedisSerializer"/>
    </bean>

    <bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <bean id="genericToStringSerializer" class="org.springframework.data.redis.serializer.GenericToStringSerializer"
          c:type="java.lang.Long"/>

    <!--  mailDao  -->
    <bean id="mailDao" class="MailDao"/>

    <!--  RedisDao  -->
    <bean id="redisDao" class="rush.io.lab.dao.cache.RedisDao"/>

</beans>